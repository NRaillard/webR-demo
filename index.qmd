---
title: Access Resourcecode hindcast database by usin webR in Quarto HTML Documents
format:
  live-html:
    webr:
engine: knitr
params:
  year: 2023
  node_id: 191868
---

{{< include ./_extensions/r-wasm/live/_knitr.qmd >}}

```{ojs}
//| echo: false
querystrings = new URL(location).searchParams

node = querystrings.get("node")
```

This is a webR-enabled code cell in a Quarto HTML document. We first have to load the packages needed.


```{webr}
#| include: true
#| runbutton: false
#| edit: false
#| warning: false
#| output: false
webr::mount(
  mountpoint ="/rscd_lib",
  source = "https://nraillard.github.io/webR-demo/output/vfs/library.data.gz") #
.libPaths(c(.libPaths(),"/rscd_lib"))

install.packages("sessioninfo")

# Adapted from: https://ostluft.github.io/rOstluft.plot/reference/ggwindrose.html
#' Windrose (speed/direction) diagram
#'
#' @description
#' Plot a windrose showing the wind speed and direction using \CRANpkg{ggplot2}.
#'
#' @family aemet_plots
#' @family wind
#'
#' @inheritSection aemet_daily_clim API Key
#'
#' @param speed Numeric vector of wind speeds.
#' @param direction Numeric vector of wind directions.
#' @param facet Character or factor vector of the facets used to plot the
#'   various windroses.
#' @param n_directions Numeric value as the number of direction bins to plot
#'   (petals on the rose). The number of directions defaults to `8`.
#' @param n_speeds Numeric value as the number of equally spaced wind speed
#'   bins to plot. This is used if `speed_cuts` is `NA` (default `5`).
#' @param speed_cuts Numeric vector containing the cut points for the wind
#'  speed intervals, or `NA` (default).
#' @param calm_wind Numeric value as the upper limit for wind speed that is
#'   considered calm (default `0`).
#' @param legend_title Character string to be used for the legend title.
#' @param plot_title Character string to be used for the plot title.
#' @param col_pal Character string indicating the name of the
#'   [hcl.pals()] color palette to be used for plotting.
#' @param n_col The number of columns of plots (default 1).
#' @param ... further arguments (ignored).
#'
#' @seealso [ggplot2::theme()] for more possible arguments to pass to
#'   `ggwindrose`.
#'
#' @return A \CRANpkg{ggplot2} object`.`
#'
#'
#' @examples
#'
#'
#' library(ggplot2)
#'
#' speed <- climaemet::climaemet_9434_wind$velmedia
#' direction <- climaemet::climaemet_9434_wind$dir
#'
#' rose <- ggwindrose(
#'   speed = speed,
#'   direction = direction,
#'   speed_cuts = seq(0, 16, 4),
#'   legend_title = "Wind speed (m/s)",
#'   calm_wind = 0,
#'   n_col = 1,
#'   plot_title = "Zaragoza Airport"
#' )
#' rose + labs(
#'   subtitle = "2000-2020",
#'   caption = "Source: AEMET"
#' )
#' @export

ggwindrose <- function(speed, direction, n_directions = 8, n_speeds = 5,
                       speed_cuts = NA, col_pal = "GnBu",
                       legend_title = "Wind speed (m/s)", calm_wind = 0,
                       n_col = 1, facet = NULL, plot_title = "",
                       ...) {
  if (missing(speed)) {
    stop("Speed can't be missing")
  }

  if (missing(direction)) {
    stop("Direction can't be missing")
  }

  include_facet <- !is.null(facet)

  if (include_facet) {
    if (!is.character(facet) && !is.factor(facet)) {
      stop("The facet variable needs to be character or factor")
    }

    if (length(facet) == 1) {
      facet <- rep(facet, length(speed))
    }

    if (length(facet) != length(speed)) {
      stop("The facet variable must be the same length as the wind speeds")
    }
  }

  if (!is.numeric(speed)) {
    stop("Wind speeds need to be numeric")
  }

  if (!is.numeric(direction)) {
    stop("Wind directions need to be numeric")
  }

  if (length(speed) != length(direction)) {
    stop("Wind speeds and directions must be the same length")
  }

  if (any((direction > 360 | direction < 0),
    na.rm = TRUE
  )) {
    stop("Wind directions can't be outside the interval [0, 360]")
  }

  if (!is.numeric(n_directions) || length(n_directions) != 1) {
    stop("n_directions must be a numeric vector of length 1")
  }

  if (!is.numeric(n_speeds) || length(n_speeds) != 1) {
    stop("n_speeds must be a numeric vector of length 1")
  }

  if (!is.numeric(calm_wind) || length(calm_wind) != 1) {
    stop("calm_wind must be a numeric vector of length 1")
  }

  if ((!is.character(legend_title) && !is.expression(
    legend_title
  )) || length(legend_title) != 1) {
    stop("Legend title must be a single character string or expression")
  }


  if (!col_pal %in% hcl.pals()) {
    stop("`col_pal` should be one of the palettes defined on `hc.pals()`")
  }

  if (any(!is.na(speed_cuts)) && !is.numeric(speed_cuts)) {
    stop("`speed_cuts` should be numeric or NA")
  }

  optimal_n_dir <- c(4, 8, 16)

  if (is.na(match(n_directions, optimal_n_dir))) {
    n_directions <-
      optimal_n_dir[which.min(abs(n_directions - optimal_n_dir))]
    message(
      "Using the closest optimal number of wind directions (",
      n_directions,
      ")"
    )
  }

  dir_labels <- switch(as.character(n_directions),
    "4" = c("N", "E", "S", "W"),
    "8" = c("N", "NE", "E", "SE", "S", "SW", "W", "NW"),
    "16" = c(
      "N", "NNE", "NE", "ENE", "E", "ESE", "SE", "SSE", "S", "SSW", "SW",
      "WSW", "W", "WNW", "NW", "NNW"
    )
  )

  # Factor variable for wind direction intervals
  dir_bin_width <- 360 / n_directions
  dir_bin_cuts <-
    seq(dir_bin_width / 2, 360 - dir_bin_width / 2, dir_bin_width)
  dir_intervals <-
    findInterval(c(direction, dir_bin_cuts), dir_bin_cuts)
  dir_intervals[dir_intervals == n_directions] <- 0
  factor_labs <-
    paste(c(tail(dir_bin_cuts, 1), head(dir_bin_cuts, -1)),
      dir_bin_cuts,
      sep = ", "
    )
  dir_bin <- head(
    factor(dir_intervals, labels = paste0("(", factor_labs, "]")),
    -n_directions
  )

  # Factor variable for wind speed intervals

  if (is.numeric(speed_cuts)) {
    if (min(speed) < min(speed_cuts)) {
      speed_cuts <- c(min(speed), speed_cuts)
    }

    if (max(speed) > max(speed_cuts)) {
      speed_cuts <- c(speed_cuts, max(speed))
    }

    speed_cuts <- sort(unique(speed_cuts))

    spd_bin <- cut(speed, speed_cuts)
  } else {
    spd_bin <- ggplot2::cut_interval(speed, n_speeds)
  }

  # New palette
  spd_cols <-
    hcl.colors(length(levels(spd_bin)), col_pal, rev = TRUE)

  if (length(spd_cols) != length(levels(spd_bin))) {
    spd_bin <- ggplot2::cut_interval(speed, length(spd_cols))
  }

  # Dataframe suitable for plotting
  if (include_facet) {
    ggplot_df <- as.data.frame(table(dir_bin, spd_bin, facet))
    ggplot_df$proportion <- unlist(
      by(
        ggplot_df$Freq,
        ggplot_df$facet, function(x) {
          x / sum(x)
        }
      ),
      use.names = FALSE
    )
  } else {
    ggplot_df <- data.frame(table(dir_bin, spd_bin))
    ggplot_df$proportion <- ggplot_df$Freq / sum(ggplot_df$Freq)
  }

  ## Draw plot

  windrose_plot <- ggplot2::ggplot(
    data = ggplot_df,
    ggplot2::aes(
      x = .data[["dir_bin"]],
      fill = .data[["spd_bin"]],
      y = .data[["proportion"]]
    )
  ) +
    ggplot2::geom_bar(stat = "identity") +
    ggplot2::scale_x_discrete(
      breaks = levels(ggplot_df$dir_bin)[seq(1, n_directions, 1)],
      labels = dir_labels,
      drop = FALSE
    ) +
    ggplot2::scale_fill_manual(name = legend_title, values = spd_cols) +
    ggplot2::coord_polar(start = 2 * pi - pi / n_directions) +
    ggplot2::scale_y_continuous(
      labels = function(values) {
        values <- sprintf("%0.1f %%", values * 100)
        return(values)
      }
    ) +
    ggplot2::theme_minimal() +
    ggplot2::theme(axis.title = ggplot2::element_blank()) +
    ggplot2::labs(title = plot_title)

  if (include_facet) {
    windrose_plot <-
      windrose_plot + ggplot2::facet_wrap(~facet, ncol = n_col)
  }

  windrose_plot <- windrose_plot +
                      labs(caption="Source: Resourcecode hindcast database\nresourcecode.ifremer.fr")

  return(windrose_plot)
}

get_parameters_raw <- function(parameter = "hs",
                               node = 42,
                               start = as.POSIXct("1994-01-01Z00:00:00"),
                               end = as.POSIXct("1994-12-31Z23:00:00")) {
  if (parameter == "tp") {
    single_parameter <- "fp"
  } else {
    single_parameter <- parameter
  }

  rcd_cassandra_url = "https://resourcecode-datacharts.ifremer.fr"
  
  start_str <- strftime(start, format = "%Y-%m-%dT%H:%M:%SZ")
  end_str <- strftime(end, format = "%Y-%m-%dT%H:%M:%SZ")

  # Cassandra database start indexing at 1, so decrements node number
  node <- node - 1

  request <- paste0(
    rcd_cassandra_url, "/api/timeseries",
    "?parameter=", single_parameter,
    "&node=", node,
    "&start=", start_str,
    "&end=", end_str
  )

  res <- jsonlite::fromJSON(request)

  if (res$errorcode != 0) {
    stop(paste0(
      "Unable to get a response from the database.\nStatus code: ",
      res$errormessage
    ))
  }

  data <- res$result$data
  colnames(data) <- c("time", parameter)
  data <- tibble::as_tibble(data)


  if (parameter == "tp") {
    data[, 2] <- 1 / data[, 2]
  }

  data$time <- as.POSIXct(data$time / 1000,
    origin = as.POSIXct("1970-01-01", tz = "UTC"),
    tz = "UTC"
  ) # Convert UNIX time (ms) to POSIXct format
  attr(data, "node") <- node
  data
}

get_parameters = function(parameters, node , start, end){
  
  if (is.character(start)) {
    start <- as.POSIXct(start, tz = "UTC")
  }
  if (is.character(end)) {
    end <- as.POSIXct(end, tz = "UTC")
  }

  if (is.numeric(start)) {
    start <- as.POSIXct(start, tz = "UTC", origin = as.POSIXct("1970-01-01 00:00:00", tz = "UTC"))
  }
  if (is.numeric(end)) {
    end <- as.POSIXct(end, tz = "UTC", origin = as.POSIXct("1970-01-01 00:00:00", tz = "UTC"))
  }
  
  out <- get_parameters_raw(parameters[1], node = node, start = start, end = end)

  for (i in seq_len(length(parameters) - 1)) {
    temp <- get_parameters_raw(parameters[i + 1], node = node, start = start, end = end)
    out <- cbind(out, temp[, 2])
  }
  out
}

```

```{webr}
#| include: true
#| runbutton: false
#| edit: false
#| warning: false
#library(resourcecodedata)
#library(resourcecode)
library(jsonlite)
library(dplyr)
library(ggplot2)
```

Once everything is up and working, we can click on the blue button to run the data exploration.

```{webr}
#| autorun: false
#| timelimit: 0
#| input:
#|   - node
ts <- get_parameters(node =  node,
                     parameters = c("hs", "tp", "dp"),
                     start = "1994-01-01 00:00:00",
                     end="2000-12-31 23:00:00")
```

::: {.panel-tabset}

## Summary statistics

```{webr}
#| autorun: false
#| fig-width: 8
#| fig-height: 5
summary(ts)
```

## Time series

```{webr}
#| fig-width: 8
#| fig-height: 5
ggplot(data=ts)+
  aes(x = time,y= hs)+
  geom_line()+
  theme_bw()
```

## Bivariate plots

```{webr}
#| autorun: false
#| fig-width: 8
#| fig-height: 5
ggplot(data=ts)+
  aes(x=hs,y=tp)+
  geom_hex()+
  scale_fill_viridis_c()+
  theme_bw()
```

```{webr}
#| autorun: false
#| fig-width: 8
#| fig-height: 5
ggplot(data=ts)+
  aes(x=hs,y=dp)+
  geom_hex()+
  scale_fill_viridis_c()+
  theme_bw()
```

## Wind and wave roses

### Wave Rose

```{webr}
#| autorun: false
#| fig-width: 7
#| fig-height: 7
ggwindrose(ts$hs,ts$dp,legend_title = "Significant\nwave height (m)")
```

### Wind Rose

To draw wind roses, we need additional data that are being downloaded below.

```{webr}
#| autorun: false
#| fig-width: 7
#| fig-height: 7
wnd <- get_parameters(node =  node,
                     parameters = c("uwnd", "vwnd"),
                     end="2000-12-31 23:00:00")
wnd <- wnd |>
   mutate(zmcomp2metconv(uwnd,vwnd))
ggwindrose(wnd$wspd,wnd$wdir)
```
:::


For reproducibility purpose and debugging, we show the session information bellow.

```{webr}
#| include: true
#| runbutton: false
#| edit: false
#| warning: false
sessioninfo::session_info()
```


